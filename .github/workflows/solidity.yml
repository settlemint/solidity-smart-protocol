name: Solidity

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - "v*"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  codescanning:
    name: Slither
    runs-on: namespace-profile-btp-scs
    if: (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]')
    steps:
      - name: Checkout
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          submodules: recursive

      - uses: crytic/slither-action@v0.4.1
        id: slither
        with:
          sarif: slither.sarif
          slither-args: --filter-paths "lib/" --filter-paths "node_modules/" --filter-paths "dependencies/" --exclude calls-loop,dead-code,naming-convention
          solc-version: "0.8.28"
          fail-on: none

      - name: Upload findings to GitHub Advanced Security Dashboard
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.slither.outputs.sarif }}
        if: always()

  semgrep:
    name: Semgrep
    runs-on: namespace-profile-btp-scs
    container:
      image: returntocorp/semgrep
    if: (github.actor != 'dependabot[bot]' && github.actor != 'renovate[bot]')
    steps:
      - uses: actions/checkout@v4
      - name: Fetch semgrep rules
        uses: actions/checkout@v4
        with:
          repository: decurity/semgrep-smart-contracts
          path: rules
      - run: semgrep ci --sarif --output=semgrep.sarif || true
        env:
          SEMGREP_RULES: rules/solidity/security rules/solidity/performance
      - name: Upload findings to GitHub Advanced Security Dashboard
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  test:
    services:
      foundry:
        image: ghcr.io/settlemint/btp-anvil-test-node:latest
        ports:
          - "8545:8545"
    name: Build Set
    #runs-on: ubuntu-latest
    runs-on: namespace-profile-btp-scs
    steps:
      - name: Setup 1Password
        uses: 1password/load-secrets-action/configure@v2
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load secrets
        uses: 1password/load-secrets-action@v2
        env:
          NPM_TOKEN: op://platform/npmjs/credential
          PAT_TOKEN: op://platform/github-commit-pat/credential
          SOLDEER_EMAIL: op://platform/soldeer/username
          SOLDEER_PASSWORD: op://platform/soldeer/password

      - name: Checkout
        uses: namespacelabs/nscloud-checkout-action@v7
        with:
          token: ${{ env.PAT_TOKEN }}

      - name: Setup caches
        uses: namespacelabs/nscloud-cache-action@v1
        with:
          path: |
            ./node_modules
            ~/.npm
            ~/.bun/install/cache

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Node dependencies
        run: npm install

      - name: Install Soldeer dependencies (Soldeer)
        run: |
          npm run dependencies

      - name: Run Forge build
        run: |
          npm run compile:forge

      - name: Run Hardhat build
        run: |
          npm run compile:hardhat

      - name: Run Forge tests
        run: |
          npm run test

      - name: Deploy to the local node
        run: |
          npm run deploy:local:test

      - name: Install YQ
        uses: alexellis/arkade-get@master
        with:
          print-summary: false
          yq: latest

      - name: Build the subgraph
        working-directory: subgraph
        run: |
          npm run subgraph:deploy:local

      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      - name: Package version
        id: package-version
        run: |
          OLD_VERSION=$(jq -r '.version' package.json)
          echo "Old version: $OLD_VERSION"
          if [[ $GITHUB_REF_SLUG =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VERSION=$(echo $GITHUB_REF_SLUG | sed 's/^v//')
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ $GITHUB_REF_NAME == "main" ]]; then
            VERSION="${OLD_VERSION}-main$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=main" >> $GITHUB_ENV
          else
            VERSION="${OLD_VERSION}-pr$(echo $GITHUB_SHA_SHORT | sed 's/^v//')"
            echo "TAG=pr" >> $GITHUB_ENV
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Updating version to $VERSION"
          jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp && mv package.json.tmp package.json

          echo "Updated version to $VERSION"

      - name: Install zsh
        run: |
          sudo apt-get update
          sudo apt-get install -y zsh

      - name: Verify zsh installation
        run: |
          zsh --version
          which zsh

      - uses: JS-DevTools/npm-publish@v3
        if: env.TAG == 'latest'
        with:
          token: ${{ env.NPM_TOKEN }}
          package: ./package.json
          access: public
          provenance: false
          strategy: all
          tag: ${{ env.TAG }}

      - name: Push Soldeer
        if: env.TAG == 'latest'
        run: |
          forge soldeer login --email ${{ env.SOLDEER_EMAIL }} --password ${{ env.SOLDEER_PASSWORD }}
          forge soldeer push smart-protocol~${VERSION} --skip-warnings

      - uses: stefanzweifel/git-auto-commit-action@v5
        if: env.TAG == 'latest'
        with:
          commit_message: "chore: update package versions [skip ci]"
          branch: main
          file_pattern: "package.json README.md"

      # - name: Set up Docker Buildx
      #   if: env.TAG == 'latest'
      #   uses: docker/setup-buildx-action@v3

      # - name: Install Cosign
      #   if: env.TAG == 'latest'
      #   uses: sigstore/cosign-installer@v3

      # - name: Login to GitHub Container Registry
      #   if: env.TAG == 'latest'
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.repository_owner }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Docker meta
      #   if: env.TAG == 'latest'
      #   id: docker_meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: |
      #       ghcr.io/${{ github.repository }}
      #     tags: |
      #       type=schedule
      #       type=ref,event=branch
      #       type=ref,event=pr
      #       type=semver,pattern={{version}}
      #       type=semver,pattern={{major}}.{{minor}}
      #       type=semver,pattern={{major}}
      #       type=sha

      # - name: Build and push
      #   if: env.TAG == 'latest'
      #   uses: docker/build-push-action@v6
      #   id: build-and-push
      #   with:
      #     platforms: linux/amd64,linux/arm64
      #     provenance: true
      #     sbom: true
      #     push: true
      #     load: false
      #     tags: ${{ steps.docker_meta.outputs.tags }}
      #     labels: ${{ steps.docker_meta.outputs.labels }}
      #     no-cache: true

      # - name: Sign the images with GitHub OIDC Token
      #   if: env.TAG == 'latest'
      #   env:
      #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #     TAGS: ${{ steps.docker_meta.outputs.tags }}
      #   run: |
      #     images=""
      #     for tag in ${TAGS}; do
      #       images+="${tag}@${DIGEST} "
      #     done
      #     cosign sign --yes ${images}
