// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.28;

import "forge-std/Script.sol";
import "forge-std/console.sol";

// Import all discovered interfaces
import { ISMARTBond } from "./contracts/assets/bond/ISMARTBond.sol";
import { ISMARTBondFactory } from "./contracts/assets/bond/ISMARTBondFactory.sol";
import { ISMARTDeposit } from "./contracts/assets/deposit/ISMARTDeposit.sol";
import { ISMARTDepositFactory } from "./contracts/assets/deposit/ISMARTDepositFactory.sol";
import { ISMARTEquity } from "./contracts/assets/equity/ISMARTEquity.sol";
import { ISMARTEquityFactory } from "./contracts/assets/equity/ISMARTEquityFactory.sol";
import { ISMARTFund } from "./contracts/assets/fund/ISMARTFund.sol";
import { ISMARTFundFactory } from "./contracts/assets/fund/ISMARTFundFactory.sol";
import { ISMARTStableCoin } from "./contracts/assets/stable-coin/ISMARTStableCoin.sol";
import { ISMARTStableCoinFactory } from "./contracts/assets/stable-coin/ISMARTStableCoinFactory.sol";
import { ISMARTTokenAccessManaged } from "./contracts/extensions/access-managed/ISMARTTokenAccessManaged.sol";
import { ISMARTTokenAccessManager } from "./contracts/extensions/access-managed/ISMARTTokenAccessManager.sol";
import { ISMARTBurnable } from "./contracts/extensions/burnable/ISMARTBurnable.sol";
import { ISMARTCapped } from "./contracts/extensions/capped/ISMARTCapped.sol";
import { ISMARTCollateral } from "./contracts/extensions/collateral/ISMARTCollateral.sol";
import { ISMARTCustodian } from "./contracts/extensions/custodian/ISMARTCustodian.sol";
import { ISMARTHistoricalBalances } from "./contracts/extensions/historical-balances/ISMARTHistoricalBalances.sol";
import { ISMARTPausable } from "./contracts/extensions/pausable/ISMARTPausable.sol";
import { ISMARTRedeemable } from "./contracts/extensions/redeemable/ISMARTRedeemable.sol";
import { ISMARTYield } from "./contracts/extensions/yield/ISMARTYield.sol";
import { ISMARTFixedYieldSchedule } from "./contracts/extensions/yield/schedules/fixed/ISMARTFixedYieldSchedule.sol";
import { ISMARTYieldSchedule } from "./contracts/extensions/yield/schedules/ISMARTYieldSchedule.sol";
import { IERC3643 } from "./contracts/interface/ERC-3643/IERC3643.sol";
import { IERC3643ClaimTopicsRegistry } from "./contracts/interface/ERC-3643/IERC3643ClaimTopicsRegistry.sol";
import { IERC3643Compliance } from "./contracts/interface/ERC-3643/IERC3643Compliance.sol";
import { IERC3643IdentityRegistry } from "./contracts/interface/ERC-3643/IERC3643IdentityRegistry.sol";
import { IERC3643IdentityRegistryStorage } from "./contracts/interface/ERC-3643/IERC3643IdentityRegistryStorage.sol";
import { IERC3643TrustedIssuersRegistry } from "./contracts/interface/ERC-3643/IERC3643TrustedIssuersRegistry.sol";
import { ISMART } from "./contracts/interface/ISMART.sol";
import { ISMARTCompliance } from "./contracts/interface/ISMARTCompliance.sol";
import { ISMARTComplianceModule } from "./contracts/interface/ISMARTComplianceModule.sol";
import { ISMARTIdentityRegistry } from "./contracts/interface/ISMARTIdentityRegistry.sol";
import { ISMARTIdentity } from "./contracts/system/identity-factory/identities/ISMARTIdentity.sol";
import { ISMARTTokenIdentity } from "./contracts/system/identity-factory/identities/ISMARTTokenIdentity.sol";
import { ISMARTIdentityFactory } from "./contracts/system/identity-factory/ISMARTIdentityFactory.sol";
import { ISMARTSystem } from "./contracts/system/ISMARTSystem.sol";
import { ISMARTSystemFactory } from "./contracts/system/ISMARTSystemFactory.sol";
import { ISMARTTokenFactory } from "./contracts/system/token-factory/ISMARTTokenFactory.sol";

contract InterfaceIdCalculator is Script {
    function run() external {
        console.log("=== SMART Protocol Interface IDs ===");
        console.log("");

        console.log("ISMARTBond: %s", vm.toString(bytes4(type(ISMARTBond).interfaceId)));
        console.log("ISMARTBondFactory: %s", vm.toString(bytes4(type(ISMARTBondFactory).interfaceId)));
        console.log("ISMARTDeposit: %s", vm.toString(bytes4(type(ISMARTDeposit).interfaceId)));
        console.log("ISMARTDepositFactory: %s", vm.toString(bytes4(type(ISMARTDepositFactory).interfaceId)));
        console.log("ISMARTEquity: %s", vm.toString(bytes4(type(ISMARTEquity).interfaceId)));
        console.log("ISMARTEquityFactory: %s", vm.toString(bytes4(type(ISMARTEquityFactory).interfaceId)));
        console.log("ISMARTFund: %s", vm.toString(bytes4(type(ISMARTFund).interfaceId)));
        console.log("ISMARTFundFactory: %s", vm.toString(bytes4(type(ISMARTFundFactory).interfaceId)));
        console.log("ISMARTStableCoin: %s", vm.toString(bytes4(type(ISMARTStableCoin).interfaceId)));
        console.log("ISMARTStableCoinFactory: %s", vm.toString(bytes4(type(ISMARTStableCoinFactory).interfaceId)));
        console.log("ISMARTTokenAccessManaged: %s", vm.toString(bytes4(type(ISMARTTokenAccessManaged).interfaceId)));
        console.log("ISMARTTokenAccessManager: %s", vm.toString(bytes4(type(ISMARTTokenAccessManager).interfaceId)));
        console.log("ISMARTBurnable: %s", vm.toString(bytes4(type(ISMARTBurnable).interfaceId)));
        console.log("ISMARTCapped: %s", vm.toString(bytes4(type(ISMARTCapped).interfaceId)));
        console.log("ISMARTCollateral: %s", vm.toString(bytes4(type(ISMARTCollateral).interfaceId)));
        console.log("ISMARTCustodian: %s", vm.toString(bytes4(type(ISMARTCustodian).interfaceId)));
        console.log("ISMARTHistoricalBalances: %s", vm.toString(bytes4(type(ISMARTHistoricalBalances).interfaceId)));
        console.log("ISMARTPausable: %s", vm.toString(bytes4(type(ISMARTPausable).interfaceId)));
        console.log("ISMARTRedeemable: %s", vm.toString(bytes4(type(ISMARTRedeemable).interfaceId)));
        console.log("ISMARTYield: %s", vm.toString(bytes4(type(ISMARTYield).interfaceId)));
        console.log("ISMARTFixedYieldSchedule: %s", vm.toString(bytes4(type(ISMARTFixedYieldSchedule).interfaceId)));
        console.log("ISMARTYieldSchedule: %s", vm.toString(bytes4(type(ISMARTYieldSchedule).interfaceId)));
        console.log("IERC3643: %s", vm.toString(bytes4(type(IERC3643).interfaceId)));
        console.log("IERC3643ClaimTopicsRegistry: %s", vm.toString(bytes4(type(IERC3643ClaimTopicsRegistry).interfaceId)));
        console.log("IERC3643Compliance: %s", vm.toString(bytes4(type(IERC3643Compliance).interfaceId)));
        console.log("IERC3643IdentityRegistry: %s", vm.toString(bytes4(type(IERC3643IdentityRegistry).interfaceId)));
        console.log("IERC3643IdentityRegistryStorage: %s", vm.toString(bytes4(type(IERC3643IdentityRegistryStorage).interfaceId)));
        console.log("IERC3643TrustedIssuersRegistry: %s", vm.toString(bytes4(type(IERC3643TrustedIssuersRegistry).interfaceId)));
        console.log("ISMART: %s", vm.toString(bytes4(type(ISMART).interfaceId)));
        console.log("ISMARTCompliance: %s", vm.toString(bytes4(type(ISMARTCompliance).interfaceId)));
        console.log("ISMARTComplianceModule: %s", vm.toString(bytes4(type(ISMARTComplianceModule).interfaceId)));
        console.log("ISMARTIdentityRegistry: %s", vm.toString(bytes4(type(ISMARTIdentityRegistry).interfaceId)));
        console.log("ISMARTIdentity: %s", vm.toString(bytes4(type(ISMARTIdentity).interfaceId)));
        console.log("ISMARTTokenIdentity: %s", vm.toString(bytes4(type(ISMARTTokenIdentity).interfaceId)));
        console.log("ISMARTIdentityFactory: %s", vm.toString(bytes4(type(ISMARTIdentityFactory).interfaceId)));
        console.log("ISMARTSystem: %s", vm.toString(bytes4(type(ISMARTSystem).interfaceId)));
        console.log("ISMARTSystemFactory: %s", vm.toString(bytes4(type(ISMARTSystemFactory).interfaceId)));
        console.log("ISMARTTokenFactory: %s", vm.toString(bytes4(type(ISMARTTokenFactory).interfaceId)));

        console.log("");
        console.log("=== TypeScript Format ===");
        console.log("export class InterfaceIds {");
        console.log('  static ISMARTBond: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTBond).interfaceId)));
        console.log('  static ISMARTBondFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTBondFactory).interfaceId)));
        console.log('  static ISMARTDeposit: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTDeposit).interfaceId)));
        console.log('  static ISMARTDepositFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTDepositFactory).interfaceId)));
        console.log('  static ISMARTEquity: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTEquity).interfaceId)));
        console.log('  static ISMARTEquityFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTEquityFactory).interfaceId)));
        console.log('  static ISMARTFund: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTFund).interfaceId)));
        console.log('  static ISMARTFundFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTFundFactory).interfaceId)));
        console.log('  static ISMARTStableCoin: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTStableCoin).interfaceId)));
        console.log('  static ISMARTStableCoinFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTStableCoinFactory).interfaceId)));
        console.log('  static ISMARTTokenAccessManaged: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTTokenAccessManaged).interfaceId)));
        console.log('  static ISMARTTokenAccessManager: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTTokenAccessManager).interfaceId)));
        console.log('  static ISMARTBurnable: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTBurnable).interfaceId)));
        console.log('  static ISMARTCapped: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTCapped).interfaceId)));
        console.log('  static ISMARTCollateral: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTCollateral).interfaceId)));
        console.log('  static ISMARTCustodian: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTCustodian).interfaceId)));
        console.log('  static ISMARTHistoricalBalances: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTHistoricalBalances).interfaceId)));
        console.log('  static ISMARTPausable: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTPausable).interfaceId)));
        console.log('  static ISMARTRedeemable: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTRedeemable).interfaceId)));
        console.log('  static ISMARTYield: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTYield).interfaceId)));
        console.log('  static ISMARTFixedYieldSchedule: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTFixedYieldSchedule).interfaceId)));
        console.log('  static ISMARTYieldSchedule: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTYieldSchedule).interfaceId)));
        console.log('  static IERC3643: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(IERC3643).interfaceId)));
        console.log('  static IERC3643ClaimTopicsRegistry: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(IERC3643ClaimTopicsRegistry).interfaceId)));
        console.log('  static IERC3643Compliance: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(IERC3643Compliance).interfaceId)));
        console.log('  static IERC3643IdentityRegistry: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(IERC3643IdentityRegistry).interfaceId)));
        console.log('  static IERC3643IdentityRegistryStorage: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(IERC3643IdentityRegistryStorage).interfaceId)));
        console.log('  static IERC3643TrustedIssuersRegistry: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(IERC3643TrustedIssuersRegistry).interfaceId)));
        console.log('  static ISMART: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMART).interfaceId)));
        console.log('  static ISMARTCompliance: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTCompliance).interfaceId)));
        console.log('  static ISMARTComplianceModule: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTComplianceModule).interfaceId)));
        console.log('  static ISMARTIdentityRegistry: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTIdentityRegistry).interfaceId)));
        console.log('  static ISMARTIdentity: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTIdentity).interfaceId)));
        console.log('  static ISMARTTokenIdentity: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTTokenIdentity).interfaceId)));
        console.log('  static ISMARTIdentityFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTIdentityFactory).interfaceId)));
        console.log('  static ISMARTSystem: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTSystem).interfaceId)));
        console.log('  static ISMARTSystemFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTSystemFactory).interfaceId)));
        console.log('  static ISMARTTokenFactory: Bytes = Bytes.fromHexString("%s");', vm.toString(bytes4(type(ISMARTTokenFactory).interfaceId)));
        console.log("}");
    }
}
